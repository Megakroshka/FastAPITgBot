import os
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
API_URL = "http://fastapi_service:8000/products/"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
# –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
ADD_NAME, ADD_DESCRIPTION, ADD_PRICE = range(3)
# –î–∏–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
UPDATE_NAME, UPDATE_DESCRIPTION, UPDATE_PRICE = range(3, 6)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def get_product_details(product_id: int) -> dict | None:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ ID."""
    try:
        response = requests.get(f"{API_URL}{product_id}")
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException:
        return None

# --- –§—É–Ω–∫—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥."""
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏.\n\n'
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã\n'
        '/add - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä\n'
        '/get <ID> - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ\n'
        '/update <ID> - –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä\n'
        '/delete <ID> - –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä\n'
        '/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é'
    )

async def get_products(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤."""
    try:
        response = requests.get(API_URL)
        response.raise_for_status()
        products = response.json()
        if not products:
            message = "–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Å –ø–æ–º–æ—â—å—é /add."
        else:
            message = "üõí –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
            for product in products:
                message += f"üÜî ID: {product['id']}\n"
                message += f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
                message += f"üí∞ –¶–µ–Ω–∞: {product['price']}\n"
                message += "--------------------\n"
        await update.message.reply_text(message)
    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤. –û—à–∏–±–∫–∞: {e}')

async def get_single_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –ø–æ ID."""
    try:
        product_id = int(context.args[0])
        product = get_product_details(product_id)
        if product:
            message = (
                f"üì¶ –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞ ID {product['id']}:\n"
                f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
                f"üí∞ –¶–µ–Ω–∞: {product['price']}"
            )
            await update.message.reply_text(message)
        else:
            await update.message.reply_text(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞. –ü—Ä–∏–º–µ—Ä: /get 1")

async def delete_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ ID."""
    try:
        product_id = int(context.args[0])
        response = requests.delete(f"{API_URL}{product_id}")
        if response.status_code == 404:
             await update.message.reply_text(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
             return
        response.raise_for_status()
        await update.message.reply_text(f"üóëÔ∏è –¢–æ–≤–∞—Ä —Å ID {product_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    except (IndexError, ValueError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞. –ü—Ä–∏–º–µ—Ä: /delete 1")
    except requests.exceptions.RequestException:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä —Å ID {product_id}.")

# --- –î–∏–∞–ª–æ–≥ –î–û–ë–ê–í–õ–ï–ù–ò–Ø —Ç–æ–≤–∞—Ä–∞ ---

async def add_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.')
    return ADD_NAME

async def add_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name'] = update.message.text
    await update.message.reply_text('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ.')
    return ADD_DESCRIPTION

async def add_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['description'] = update.message.text
    await update.message.reply_text('–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—á–∏—Å–ª–æ).')
    return ADD_PRICE

async def add_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        price = float(update.message.text.replace(',', '.'))
        product_data = {
            "name": context.user_data['name'],
            "description": context.user_data['description'],
            "price": price
        }
        response = requests.post(API_URL, json=product_data)
        response.raise_for_status()
        await update.message.reply_text('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
    except ValueError:
        await update.message.reply_text('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∑–∞–Ω–æ–≤–æ. /add')
    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞ API: {e}')
    finally:
        context.user_data.clear()
    return ConversationHandler.END

# --- –î–∏–∞–ª–æ–≥ –û–ë–ù–û–í–õ–ï–ù–ò–Ø —Ç–æ–≤–∞—Ä–∞ ---

async def update_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    try:
        product_id = int(context.args[0])
        product = get_product_details(product_id)
        if not product:
            await update.message.reply_text(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END
        
        context.user_data['product'] = product
        await update.message.reply_text(
            f"–û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä: '{product['name']}'.\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞—Ä–æ–µ."
        )
        return UPDATE_NAME
    except (IndexError, ValueError):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞. –ü—Ä–∏–º–µ—Ä: /update 1")
        return ConversationHandler.END

async def update_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –æ–ø–∏—Å–∞–Ω–∏—é."""
    context.user_data['product']['name'] = update.message.text
    await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ /skip.")
    return UPDATE_DESCRIPTION

async def skip_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –æ–ø–∏—Å–∞–Ω–∏—é."""
    await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ /skip.")
    return UPDATE_DESCRIPTION

async def update_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Ü–µ–Ω–µ."""
    context.user_data['product']['description'] = update.message.text
    await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∏–ª–∏ /skip.")
    return UPDATE_PRICE

async def skip_description(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Ü–µ–Ω–µ."""
    await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –∏–ª–∏ /skip.")
    return UPDATE_PRICE

async def update_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é —Ü–µ–Ω—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ API."""
    try:
        context.user_data['product']['price'] = float(update.message.text.replace(',', '.'))
        await update.message.reply_text("–¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –°–æ—Ö—Ä–∞–Ω—è—é —Ç–æ–≤–∞—Ä...")
        return await save_update(update, context)
    except ValueError:
        await update.message.reply_text('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /skip.')
        return UPDATE_PRICE # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

async def skip_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ API."""
    await update.message.reply_text("–¶–µ–Ω–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. –°–æ—Ö—Ä–∞–Ω—è—é —Ç–æ–≤–∞—Ä...")
    return await save_update(update, context)

async def save_update(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ API."""
    product = context.user_data.get('product')
    if not product:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω—ã.")
        return ConversationHandler.END
    
    try:
        product_id = product.pop('id')
        
        response = requests.put(f"{API_URL}{product_id}", json=product)
        response.raise_for_status()
        await update.message.reply_text('‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')

    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f'–û—à–∏–±–∫–∞ API: {e}')
    finally:
        context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ª—é–±–æ–π –¥–∏–∞–ª–æ–≥."""
    await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    context.user_data.clear()
    return ConversationHandler.END

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    add_conv = ConversationHandler(
        entry_points=[CommandHandler("add", add_start)],
        states={
            ADD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_name)],
            ADD_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_description)],
            ADD_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_price)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –î–∏–∞–ª–æ–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_conv = ConversationHandler(
        entry_points=[CommandHandler("update", update_start)],
        states={
            UPDATE_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, update_name),
                CommandHandler("skip", skip_name)
            ],
            UPDATE_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, update_description),
                CommandHandler("skip", skip_description)
            ],
            UPDATE_PRICE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, update_price),
                CommandHandler("skip", skip_price)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("list", get_products))
    application.add_handler(CommandHandler("get", get_single_product))
    application.add_handler(CommandHandler("delete", delete_product))
    application.add_handler(add_conv)
    application.add_handler(update_conv)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()